name: Production Deployment

on:
  push:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  blue-green-deployment:
    name: Blue-Green Deployment
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy.outputs.production_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Deploy Green Environment
        id: deploy
        run: |
          # Blue-Green deployment logic
          GREEN_URL=$(npx vercel --token ${{ secrets.VERCEL_TOKEN }} deploy dist)
          echo "Deploying to green environment: $GREEN_URL"
          
          # Validate green environment
          npm run test:production --url=$GREEN_URL
          
          # Switch traffic (simplified example)
          npx vercel alias $GREEN_URL production.yourapp.com
          
          echo "production_url=${{ vars.PRODUCTION_URL }}" >> $GITHUB_OUTPUT

      - name: Promote Feature Flags
        run: |
          # Promote feature flags from staging to production
          npx launchdarkly-cli feature-flags:promote \
            --from-environment=staging \
            --to-environment=production \
            --project-key=${{ secrets.LAUNCHDARKLY_PROJECT_KEY }} \
            --access-token=${{ secrets.LAUNCHDARKLY_ACCESS_TOKEN }}

  production-health-check:
    name: Production Health Verification
    needs: blue-green-deployment
    runs-on: ubuntu-latest
    steps:
      - name: Comprehensive Health Check
        run: |
          attempts=5
          for ((i=1; i<=$attempts; i++)); do
            response=$(curl -s -o /dev/null -w "%{http_code}" ${{ vars.PRODUCTION_URL }})
            if [ $response -eq 200 ]; then
              echo "Production deployment successful"
              exit 0
            fi
            echo "Health check failed, attempt $i of $attempts"
            sleep 30
          done
          echo "Production health check failed"
          exit 1

  rollback-on-failure:
    name: Rollback if Deployment Fails
    needs: [blue-green-deployment, production-health-check]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Initiate Rollback
        run: |
          # Rollback to previous stable version
          npx vercel rollback \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --deployment=previous-stable-deployment

  notify-stakeholders:
    name: Notify Stakeholders
    needs: [blue-green-deployment, production-health-check]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: "ðŸš€ Production deployment successful! New version is live."