name: Staging Deployment

on:
  push:
    branches: [ develop ]

env:
  NODE_VERSION: '18'

jobs:
  deploy-preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.preview_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Deploy to Preview Environment
        id: deploy
        run: |
          # Use a service like Vercel, Netlify, or custom deployment script
          PREVIEW_URL=$(npx vercel --token ${{ secrets.VERCEL_TOKEN }} deploy dist)
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Run Smoke Tests
        run: |
          npm run test:smoke --url=${{ steps.deploy.outputs.preview_url }}

      - name: Configure Feature Flags
        run: |
          # Example with LaunchDarkly or similar feature flag service
          npx launchdarkly-cli feature-flags:configure \
            --environment=staging \
            --project-key=${{ secrets.LAUNCHDARKLY_PROJECT_KEY }} \
            --access-token=${{ secrets.LAUNCHDARKLY_ACCESS_TOKEN }}

  health-check:
    name: Post-Deployment Health Check
    needs: deploy-preview
    runs-on: ubuntu-latest
    steps:
      - name: Verify Deployment
        run: |
          # Implement comprehensive health checks
          attempts=3
          for ((i=1; i<=$attempts; i++)); do
            response=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.deploy-preview.outputs.preview_url }})
            if [ $response -eq 200 ]; then
              echo "Deployment successful"
              exit 0
            fi
            echo "Health check failed, attempt $i of $attempts"
            sleep 10
          done
          echo "Deployment health check failed"
          exit 1

  notify-slack:
    name: Notify Slack
    needs: [deploy-preview, health-check]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: "ðŸš€ Staging deployment successful for ${{ github.ref }} branch!"